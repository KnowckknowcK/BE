# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Deploy dev branch

on:
  push:
    branches: [ "dev" ]


jobs:
  test-build:
    runs-on: ubuntu-latest

    permissions:
      contents: read

    # set up java
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

      # set up .env file
    - name: Create .env
      run: |
        touch ./.env
        echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> ./.env
        echo "DOCKER_IMAGE=${{ secrets.DOCKER_IMAGE }}" >> ./.env

      # set up application file
    - name: Create application file
      run: |
        mkdir -p ./src/main/resources
        cd ./src/main/resources
        echo "${{ secrets.APPLICATION }}" >> ./application.properties
        echo "${{ secrets.APPLICATION_TEST }}" >> ./application-test.properties
        echo "${{ secrets.APPLICATION_PROD }}" >> ./application-prod.properties


      # set up mysql
    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        host port: 3306
        container port: 3306
        mysql database: 'testdb'
        mysql user: 'test'
        mysql password: 'test'

      # apply caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    # gradle grant execution permission and build project
    - name: Setup Gradle
      run: |
        chmod +x ./gradlew
        ./gradlew clean build -x test

    # login dockerhub
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # build Docker image
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }} .

    # push docker image
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}


  # run docker image
  deploy:
    runs-on: ubuntu-latest
    needs: test-build

    steps:
    - name: Deploy Docker image
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          sudo docker stop ${{ secrets.DOCKER_IMAGE }} 2>/dev/null || true
          sudo docker rm ${{ secrets.DOCKER_IMAGE }}
          sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
          sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKER_IMAGE }}
          sudo docker-compose -f docker-compose-monitoring.yml up -d
          sudo docker system prune -f
